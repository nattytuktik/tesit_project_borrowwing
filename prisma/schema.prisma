

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model test {
  id     Int    @id @default(autoincrement())
  name   String
  title  String
  status Status @default(ALREALY)
}

model Customer {
  id         Int         @id @default(autoincrement())
  first_name String
  last_name  String
  tel        String      @db.VarChar(10)
  status     Status      @default(ALREALY)
  Borrowing  Borrowing[]
  timeStamps DateTime    @default(now())
}

model Borrowing {
  id          Int           @id @default(autoincrement())
  customer_id Int
  manager_id  Int
  start_date  DateTime
  end_date    DateTime
  address     String        @default("N/A")
  status      Status        @default(ALREALY)
  manager     Manager       @relation(fields: [manager_id], references: [id])
  customer    Customer      @relation(fields: [customer_id], references: [id])
  pandding    Pandding      @default(PANDDING)
  Reservation Reservation[]
  timeStamps  DateTime      @default(now())
}

model Manager {
  id         Int         @id @default(autoincrement())
  first_name String
  last_name  String
  user_name  String      @unique
  password   String
  salt       String
  tel        String      @db.VarChar(10)
  status     Status      @default(ALREALY)
  borrowing  Borrowing[]
  timeStamps DateTime    @default(now())
}

model Equiment {
  id          Int           @id @default(autoincrement())
  name        String
  quantity    Int
  reservation Reservation[]
  image       String
  status      Status        @default(ALREALY) 
  timeStamps  DateTime      @default(now())
}

model Reservation {
  borrowing_id Int
  equipment_id Int
  quantity     Int
  borrowing    Borrowing @relation(fields: [borrowing_id], references: [id])
  equipment    Equiment  @relation(fields: [equipment_id], references: [id])
  status       Status    @default(ALREALY)
  timeStamps   DateTime  @default(now())

  @@id([borrowing_id, equipment_id])
}

enum Status {
  ON
  DELETED
  ALREALY
  INALREALY
  OFF
}

enum Pandding {
  PANDDING
  FAILD
  SUCCESS
}
